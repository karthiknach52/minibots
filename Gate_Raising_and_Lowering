#include <Servo.h>

Servo myservoL; //The servo on the robot's left looking forwards
Servo myservoR;
void setup() 
{
  myservoL.attach(6);  // Ataches the pin numbers to the servo class
  myservoR.attach(5);
}

int ServoPos = 0;
class GateClass
{
  long Uptime; //How long the gate is raised

  bool Raised; //True if the gate is/needs to be raised
  bool NeedsRaised; //True when a ball is detected
  unsigned long PreviousMillis; //for time between moving gate
  unsigned long PreviousMillisServ; //for time between servo movements

public: 
GateClass(long Uptime)
{
Raised = false;
PreviousMillis = 0; //for time between moving gate
PreviousMillisServ = 0; //for time between servo movements
}
void GateUpdate()
{
  unsigned long CurrentMillis = millis();
  if ((Raised == true) && (CurrentMillis - PreviousMillis >= Uptime)) // if the gate is raised and time has passed
  {
    if ((ServoPos > 0)&&(CurrentMillis - PreviousMillisServ >= 15))  //if angle is more than 0 and time passed for servo to move
    { 
    ServoPos -= 1;
    myservoL.write(ServoPos); 
    myservoR.write(90-ServoPos);
    PreviousMillisServ = CurrentMillis;
   }
    if (ServoPos == 0)
    {
    PreviousMillis = CurrentMillis;
    Raised = false;
    }
  }
  else if ((NeedsRaised ==  true)&&(Raised == false)) // Raise Gate if needed
  {
    if ((ServoPos < 90)&&(CurrentMillis - PreviousMillisServ >= 15))  //if angle is less than 90 and time passed for servo to move
    { 
    ServoPos += 1;
    myservoL.write(ServoPos); 
    myservoR.write(90-ServoPos);
    PreviousMillisServ = CurrentMillis;
   }
    if (ServoPos == 90)
    {
    PreviousMillis = CurrentMillis;
    NeedsRaised = false;
    Raised = true;
    }
  }
}
};

GateClass Gate(3000); //create gate obj, stays up for 300s

void loop()
{
    Gate.GateUpdate();
}
